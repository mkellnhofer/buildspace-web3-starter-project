{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","message","setMessage","isLoading","setIsLoading","allWaves","setAllWaves","checkIfWalletIsConnected","a","window","ethereum","console","log","getAllWaves","request","method","accounts","length","account","useEffect","connectWallet","alert","wavePortalContract","createContract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","createWave","waveTxn","hash","wait","getTotalWaveCount","count","toNumber","onNewWaveHandler","from","prevState","signer","ethers","providers","Web3Provider","getSigner","Contract","contractMeta","abi","on","registerOnNewWaveHandler","WaveList","props","items","map","index","className","toLocaleString","onClick","type","placeholder","rows","disabled","onChange","event","target","value","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76557398.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport \"./App.css\";\n\nimport contractMeta from \"./contract_meta.json\";\n\nconst CONTRACT_ADDRESS = \"0x528EE74F2D2d0C029BDAaafc0c3a367f91c6ce25\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [message, setMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [allWaves, setAllWaves] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    }\n\n    // Query waves \n    getAllWaves();\n\n    try {\n      // Get connected accounts\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      \n      // Check if there is a connected account\n      if (accounts.length === 0) {\n        console.log(\"No authorized account found!\");\n        return;\n      }\n\n      // Get first connected account\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n\n      // Update state\n      setCurrentAccount(account);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      alert(\"Get MetaMask!\");\n      return;\n    }\n\n    try {\n      // Request account access\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      // Get first connected account\n      const account = accounts[0];\n\n      console.log(\"Connected account: \", account);\n\n      // Update state\n      setCurrentAccount(account);\n\n      // Query waves\n      getAllWaves();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getAllWaves = async () => {\n    try {\n      // Get contract\n      const wavePortalContract = createContract();\n\n      // Get waves from contract\n      const waves = await wavePortalContract.getAllWaves();\n      \n      // Convert objects\n      let wavesCleaned = [];\n      waves.forEach(wave => {\n        wavesCleaned.push({\n          address: wave.waver,\n          timestamp: new Date(wave.timestamp * 1000),\n          message: wave.message\n        });\n      });\n\n      // Update state\n      setAllWaves(wavesCleaned);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const createWave = async () => {\n    try {\n      // Get contract\n      const wavePortalContract = createContract();\n\n      // Execute the actual wave on contract\n      const waveTxn = await wavePortalContract.wave(message);\n\n      // Wait for mining of transaction\n      console.log(\"Mining...\", waveTxn.hash);\n      setIsLoading(true);\n      await waveTxn.wait();\n      setMessage(\"\");\n      setIsLoading(false);\n      console.log(\"Mined -- \", waveTxn.hash);\n\n      // Get wave count from contract\n      let count = await wavePortalContract.getTotalWaveCount();\n      console.log(\"Retrieved total wave count...\", count.toNumber());\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const onNewWaveHandler = (from, timestamp, message) => {\n    console.log(\"NewWave\", from, timestamp, message);\n    setAllWaves(prevState => [\n      ...prevState,\n      {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message,\n      },\n    ]);\n  };\n\n  const registerOnNewWaveHandler = () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      return () => {};\n    }\n\n    // Get contract\n    const wavePortalContract = createContract();\n\n    // Subscribe event 'NewWave'\n    wavePortalContract.on(\"NewWave\", onNewWaveHandler);\n\n    return () => {\n      // Unsubscribe event 'NewWave'\n      wavePortalContract.off(\"NewWave\", onNewWaveHandler);\n    };\n  };\n\n  useEffect(() => {\n    registerOnNewWaveHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function createContract() {\n    // Get Web3 provider/signer\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    // Get contract\n    return new ethers.Contract(CONTRACT_ADDRESS, contractMeta.abi, signer);\n  }\n\n  const handleMessageChange = (event) => {\n    setMessage(event.target.value);\n  }\n\n  function WaveList(props) {\n    const waves = props.waves;\n\n    if (waves.length === 0) {\n      return (<p>none</p>);\n    }\n\n    const items = waves.map((wave, index) =>\n      <div key={index} className=\"recent-wave-container\">\n        <p className=\"recent-wave-address\">{wave.address}</p>\n        <p className=\"recent-wave-time\">({wave.timestamp.toLocaleString(\"en-US\")})</p>\n        <p>{wave.message}</p>\n      </div>\n    );\n\n    return (<div>{items}</div>);\n  }\n  \n  return (\n    <div className=\"main-container\">\n      <div className=\"content-container\">\n        <h1>ðŸ‘‹ <span className=\"colorized-text\">Hello!</span></h1>\n\n        <p>\n          I am Matt. I just started to learn Web3 development, so that's pretty cool right? Connect\n          your Ethereum wallet and wave at me!\n        </p>\n\n        <p className=\"small-text\">You can win some Ether! Don't tell anybody! ðŸ¤«</p>\n\n        {!currentAccount && (\n          <div className=\"connect-wallet-container\">\n            <button onClick={connectWallet}>Connect Wallet</button>\n          </div>\n        )}\n\n        {currentAccount && (\n          <div className=\"send-message-container\">\n            <textarea\n              type=\"text\"\n              placeholder=\"Your message\"\n              rows=\"5\"\n              disabled={isLoading}\n              onChange={handleMessageChange}\n              value={message}\n            />\n\n            <button\n              className=\"colorized-bg\"\n              disabled={message === \"\" || isLoading}\n              onClick={createWave}>\n              Wave at Me\n            </button>\n            \n            {isLoading && (\n              <div className=\"loader\" />\n            )}\n          </div>\n        )}\n\n        {currentAccount && (\n          <div className=\"recent-waves-container\">\n            <h2>Recent Waves</h2>\n            <WaveList waves={allWaves} />\n          </div>\n        )}\n\n        <div className=\"about-container\">\n          <p>\n            <span>build with ðŸ¦„ </span>\n            <a href=\"https://buildspace.so\" className=\"colorized-text\">buildspace</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}